import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@SpringBootTest
@ExtendWith(SpringExtension.class)
public class PriceServiceTest {

    private PriceService priceService;

    @BeforeEach
    public void setUp() {
        priceService = new PriceService();
    }

    @Test
    public void testGetPrice_Valid() {
        double expectedPrice = 100.0;
        priceService.setPrice(expectedPrice);
        double actualPrice = priceService.getPrice();
        assertThat(actualPrice).isEqualTo(expectedPrice);
    }

    @Test
    public void testGetPrice_Negative() {
        double inputPrice = -100.0;
        
        IllegalArgumentException exception = assertThrows(
            IllegalArgumentException.class,
            () -> priceService.setPrice(inputPrice)
        );

        assertThat(exception).hasMessage("Price cannot be negative");
        
        assertThat(priceService.getPrice()).isZero();
    }

    @Test
    public void testGetPrice_UpperBound() {
        double inputPrice = Double.MAX_VALUE;

        priceService.setPrice(inputPrice);
        double actualPrice = priceService.getPrice();
        
        assertThat(inputPrice).isEqualTo(actualPrice);
    }

    @Test
    public void testGetPrice_LowerBound() {
        double inputPrice = 0.0;
        
        priceService.setPrice(inputPrice);
        double actualPrice = priceService.getPrice();

        assertThat(inputPrice).isEqualTo(actualPrice);
    }
}
